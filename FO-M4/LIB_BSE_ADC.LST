C51 COMPILER V9.52.0.0   LIB_BSE_ADC                                                       03/29/2016 17:02:44 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LIB_BSE_ADC
OBJECT MODULE PLACED IN LIB_BSE_ADC.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LIB_BSE_ADC.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //------------------------------------------------------------------------------------
   2          //LIB_BSE_ADC.c
   3          //------------------------------------------------------------------------------------
   4          //
   5          // AUTH: Farineau Camille - Ngattai Lam Prince
   6          // DATE: 14/10/2015
   7          // Target: C8051F020
   8          //
   9          // Tool chain: KEIL PK51
  10          
  11          // Includes
  12          //-----------------------------------------------------------------------------
  13          #include <c8051f020.h> 
  14          #include <LIB_BSE_ADC.h>
  15          #include <math.h>
  16          #include <stdio.h>
  17          #include <stdlib.h>
  18          
  19          //-----------------------------------------------------------------------------
  20          //------------------------------------------------------------------------------------
  21          // Global CONSTANTS
  22          //------------------------------------------------------------------------------------
  23          
  24          
  25          
  26          
  27          void CFG_VREF(void)
  28          {
  29   1        REF0CN=0x03; //autorise l'ADC et la réference vref provient de VREF pin avec VREF=2.4V
  30   1      }
  31          
  32          
  33          //*****************************************************************************  
  34          //Cfg_ADC0
  35          //
  36          //   Configuration de l'ADC0
  37          // 
  38          //*****************************************************************************
  39          void CFG_ADC0(void)
  40          {
  41   1          AMX0SL    = 0x03;// Grace au tableau page 48 la configuration associée aux 4 bits de poids faible de      
             -                            //ADC0CF est la combinaison 0011 soit 03 en héxadécimal.
  42   1          AMX0CF    &=0xF0; // Ce registre permmet de mettre les les Inputs AIN2 et AIN3 en unipolaire          //et non
             - en bipolaire
  43   1          ADC0CF    = 0xA8; // On configure la clock permettant de cadencer la conversion de l'ADC 
  44   1              // Le choix du Gain est de 1 car lors de nos simulations nous générons un signal de 0-3V
  45   1          ADC0CN    = 0x81; // Registre de controle de L'ADC 
  46   1              // La fin de la conversion est donnée par le passage à 1 de AD0INT.
  47   1              // AD0BUSY génère un 1 sur AD0INT sur front descendant lorsque la conversion est terminée
  48   1              //La conversion est initialisée à chaque fois que l'on écrit 1 dans AD0BUSY
  49   1              //ADC0L is left justified
  50   1      }
  51          
  52          
  53          //*****************************************************************************  
C51 COMPILER V9.52.0.0   LIB_BSE_ADC                                                       03/29/2016 17:02:44 PAGE 2   

  54          //ACQ_ADC
  55          //
  56          //   La conversion est déclenchée par écriture dans DAC0H (Fonction Send_to_DAC0)
  57          // 
  58          //*****************************************************************************
  59          unsigned char ACQ_ADC(void) 
  60          {
  61   1        AD0INT=0;
  62   1        AD0BUSY=1; // La conversion a commencé
  63   1        while(AD0INT!=1){} //On attend qeu le front descendant de AD0BUSY déclenche la mise à 1 de AD0INT pour qu
             -e         //la conversion soit terminée
  64   1        AD0INT=0;
  65   1        return ADC0H; // On retourne la veleur convertie.
  66   1        }
  67          float Conversion (float TensHexa)
  68          {
  69   1        float Tension2 = (TensHexa/75);
  70   1          
  71   1        float Distance=166.38*exp(-0.892*Tension2);
  72   1        return Distance;
  73   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     81    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
